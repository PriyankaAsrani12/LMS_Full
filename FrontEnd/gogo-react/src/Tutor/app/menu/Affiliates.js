import React, { useEffect, useState } from 'react';
import {
  Row,
  NavItem,
  Nav,
  TabContent,
  TabPane,
  NavLink,
  CardBody,
  Card,
  Col,
  CardText,
} from 'reactstrap';
import classnames from 'classnames';

import { IoIosPeople } from 'react-icons/io';
import { FaUserCheck } from 'react-icons/fa';
import { HiCurrencyRupee } from 'react-icons/hi';
import { Scrollbars } from 'react-custom-scrollbars';
import { BiRupee } from 'react-icons/bi';

import Table from './Table';
import axiosInstance from '../../../helpers/axiosInstance';
import NotificationManager from '../../../components/common/react-notifications/NotificationManager';
import NoDataFound from '../../../CustomComponents/NoDataFound';

const Affiliates = () => {
  const [activeFirstTab6, setActiveFirstTab6] = useState('20');

  const [totalAffiliates, setTotalAffiliates] = useState(0);
  const [totalEnrollments, setTotalEnrollments] = useState(0);
  const [totalRevenue, setTotalRevenue] = useState(0);
  const [totalRewardsGiven, setTotalRewardsGiven] = useState(0);
  const [error, setError] = useState(null);

  const [data1, setData1] = useState([]);
  const [data2, setData2] = useState([]);
  useEffect(() => {
    if (error) {
      console.log(error);
      NotificationManager.warning(error, 'User Profile', 3000, null, null, '');
    }
  }, [error]);

  const cols15 = [
    {
      Header: 'Course Name',
      accessor: 'Course_n',
      cellClass: 'text-muted ',
      Cell: (props) => <p className="ml-2">{props.value}</p>,
      sortType: 'basic',
    },
    {
      Header: 'Total Enrollments',
      accessor: 'te',
      cellClass: 'text-muted ',
      Cell: (props) => <p className="ml-4">{props.value}</p>,
      sortType: 'basic',
    },
    {
      Header: 'Enrollments by Affiliate',
      accessor: 'Revenue',
      cellClass: 'text-muted ',
      Cell: (props) => <p style={{ marginLeft: '50px' }}>{props.value}</p>,
      sortType: 'basic',
    },
    {
      Header: 'Revenue Generated by Affiliate',
      accessor: 'rge',
      cellClass: 'text-muted ',
      Cell: (props) => <p style={{ marginLeft: '90px' }}>{props.value}</p>,
      sortType: 'basic',
    },
    {
      Header: 'Rewards Given',
      accessor: 'Rewards_g',
      cellClass: 'text-muted w-20',
      Cell: (props) => <p style={{ marginLeft: '50px' }}>{props.value}</p>,
      sortType: 'basic',
    },
  ];

  const cols11 = [
    {
      Header: 'Affiliate Name',
      accessor: 'affiliate_name',
      cellClass: 'text-muted ',
      Cell: (props) => <p className="ml-2">{props.value}</p>,
      sortType: 'basic',
    },
    {
      Header: 'Number of Enrollments',
      accessor: 'noe',
      cellClass: 'text-muted ',
      Cell: (props) => <p className="text-center">{props.value}</p>,
      sortType: 'basic',
    },
    {
      Header: 'Revenue Generated',
      accessor: 'Revenue',
      cellClass: 'text-muted ',
      Cell: (props) => <p style={{ marginLeft: '70px' }}>{props.value}</p>,
      sortType: 'basic',
    },
    {
      Header: 'Rewards Given',
      accessor: 'Rewards',
      cellClass: 'text-muted ',
      Cell: (props) => <p style={{ marginLeft: '50px' }}>{props.value}</p>,
      sortType: 'basic',
    },
    {
      Header: 'Course Name',
      accessor: 'Course',
      cellClass: 'text-muted w-20',
      Cell: (props) => <p>{props.value}</p>,
      sortType: 'basic',
    },
  ];

  useEffect(() => {
    const getData = async () => {
      try {
        const result = await axiosInstance.get('/tutor/affliates');
        console.log(result);
        if (result.data.success) {
          let noofenroll = 0,
            revenue = 0,
            rewards = 0;

          const data1 = result.data.result.map((doc) => {
            noofenroll += parseInt(doc.no_of_enrollments);
            revenue += parseInt(doc.revenue_generated);
            rewards += parseInt(doc.rewards_given);

            return {
              affiliate_name: doc.affiliate_name,
              noe: doc.no_of_enrollments,
              Revenue: doc.revenue_generated,
              Rewards: doc.rewards_given,
              Course: doc.course_name,
            };
          });

          const data2 = result.data.result2.map((doc) => ({
            Course_n: doc.course_name,
            te: doc.total_enrollments,
            Revenue: doc.enrollments_by_affiliate,
            rge: doc.revenue_generated_by_affiliate,
            Rewards_g: doc.rewards_given,
          }));
          setTotalAffiliates(result.data.result.length);
          setTotalEnrollments(noofenroll);
          setTotalRevenue(revenue);
          setTotalRewardsGiven(rewards);
          setData1(data1);
          setData2(data2);
        } else {
          try {
            setError(result.data.error);
          } catch (error) {
            setError('Unable to fetch data');
          }
        }
      } catch (error) {
        try {
          setError(error.response.data.error);
        } catch (error) {
          setError('Unable to fetch details');
        }
      }
    };
    getData();
  }, []);

  if (!data1.length) return <NoDataFound />;
  return (
    <>
      <Row>
        <Col sm="3" xs="12" className="mb-3">
          <Card
            body
            id="crd"
            className="text-center"
            style={{ backgroundColor: '#FFA07A' }}
          >
            <Row>
              <Col md="6" xs="6">
                <IoIosPeople id="myicon" className="text-light" />
              </Col>
              <Col md="6" xs="6">
                <CardText className="font-weight-bold head text-light">
                  {totalAffiliates}
                </CardText>
                <CardText className="font-weight-bold para text-light">
                  Total Affiliates
                </CardText>
              </Col>
            </Row>
          </Card>
        </Col>
        <Col sm="3" xs="12" className="mb-3">
          <Card
            body
            id="crd"
            className="text-center"
            style={{ backgroundColor: '#AF7AC5' }}
          >
            <Row>
              <Col md="6" xs="6">
                <FaUserCheck id="myicon" className="text-light" />
              </Col>
              <Col md="6" xs="6">
                <CardText className="font-weight-bold head text-light">
                  {totalEnrollments}
                </CardText>
                <CardText className="font-weight-bold para text-light">
                  Total Enrollments
                </CardText>
              </Col>
            </Row>
          </Card>
        </Col>
        <Col sm="3" xs="12" className="mb-3">
          <Card
            body
            id="crd"
            className="text-center"
            style={{ backgroundColor: '#52BE80' }}
          >
            <Row>
              <Col md="6" xs="6">
                <BiRupee id="myicon" className="text-light" />
              </Col>
              <Col md="6" xs="6" className="mb-3">
                <CardText className="font-weight-bold head text-light">
                  {/* <BiRupee /> */}
                  {totalRevenue}
                </CardText>
                <CardText className="font-weight-bold para text-light">
                  Total Revenue
                </CardText>
              </Col>
            </Row>
          </Card>
        </Col>
        <Col sm="3" xs="12" className="mb-3">
          <Card
            body
            id="crd"
            className="text-center"
            style={{ backgroundColor: '#5499C7' }}
          >
            <Row>
              <Col md="6" xs="6">
                <HiCurrencyRupee id="myicon" className="text-light" />
              </Col>
              <Col md="6" xs="6" className="mb-3">
                <CardText className="font-weight-bold head text-light">
                  {totalRewardsGiven}
                </CardText>
                <CardText className="font-weight-bold para text-light">
                  Total Rewards given
                </CardText>
              </Col>
            </Row>
          </Card>
        </Col>
      </Row>
      <Row>
        <Col md="12" xs="12">
          <Card className="h-100 pl-4  ">
            <Nav tabs className="card-header-tabs ">
              <NavItem style={{ marginTop: '40px', MarginLeft: '40px' }}>
                <NavLink
                  to="#"
                  location={{}}
                  className={classnames({
                    active: activeFirstTab6 === '20',
                    'nav-link': true,
                  })}
                  onClick={() => {
                    setActiveFirstTab6('20');
                  }}
                >
                  <h6>Affiliate Name</h6>
                </NavLink>
              </NavItem>
              <NavItem style={{ marginTop: '40px', MarginLeft: '40px' }}>
                <NavLink
                  to="#"
                  location={{}}
                  className={classnames({
                    active: activeFirstTab6 === '21',
                    'nav-link': true,
                  })}
                  onClick={() => {
                    setActiveFirstTab6('21');
                  }}
                >
                  <h6>Course Name</h6>
                </NavLink>
              </NavItem>
            </Nav>
            <Scrollbars style={{ width: '100%', height: 400 }}>
              <CardBody style={{ width: '120%' }}>
                <TabContent activeTab={activeFirstTab6}>
                  <TabPane tabId="20">
                    <Table columns={cols11} data={data1} />{' '}
                  </TabPane>
                  <TabPane tabId="21">
                    <Table columns={cols15} data={data2} />{' '}
                  </TabPane>
                </TabContent>
              </CardBody>
            </Scrollbars>
          </Card>
        </Col>
      </Row>
    </>
  );
};

export default Affiliates;
